.. _vsce-copilot:

==================================
MongoDB Github Copilot Participant
==================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol


|vsce-full| includes a MongoDB Github Copilot Participant to assist in
using `Github Copilot <https://github.com/features/copilot>`__ with your
MongoDB deployments. Through Github Copilot's chat feature, users with
|vsce| can interact with their MongoDB clusters and generate code with
MongoDB domain-specific knowledge on top of Github Copilot's LLM. 

The MongoDB Github Copilot Participant includes MongoDB-specific
commands to assist in interacting with your deployment.

/query
------

Users can use the ``/query`` command in the Github Copilot chat to
generate queries from a natural language against a connected MongoDB
cluster. The MongoDB Github Copilot Participant provides underlying
schema information of the relevant collections to Github Copilot to
generate a response. If you do not specify a collection in your prompt,
the chat prompts you to select a relevant collection. 

When the LLM generates a query, users can open the query in a playground
file or run the query directly in their collection. 

Example
~~~~~~~

Consider a ``fruits`` collection that contains documents with the
following structure:

.. code-block:: javascript
   :copyable: false

   {
      _id: 1,
      item: "tangerine",
      type: "citrus"
   }
   
Once you connect to the deployment that contains the ``fruits``
collection, you can ask the Github Copilot chat to generate a query that
finds all documents in the ``fruits`` collection that have the type
``citrus``. 

.. code-block:: javascript
   :copyable: false

   @MongoDB /query find all documents in the fruits collection that have
   the type citrus

The Github Copilot Chat uses the MongoDB Github Copilot Participant to
generate the following query using knowledge of your database schema:

.. code-block:: javascript
   
   db.getCollection('fruits').find({ type: 'citrus' })


.. toctree::
   :titlesonly:

   AI & Data Usage </ai-data-usage>


